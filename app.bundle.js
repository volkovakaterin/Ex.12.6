!function(t){var e={};function n(r){if(e[r])return e[r].exports;var o=e[r]={i:r,l:!1,exports:{}};return t[r].call(o.exports,o,o.exports,n),o.l=!0,o.exports}n.m=t,n.c=e,n.d=function(t,e,r){n.o(t,e)||Object.defineProperty(t,e,{enumerable:!0,get:r})},n.r=function(t){"undefined"!=typeof Symbol&&Symbol.toStringTag&&Object.defineProperty(t,Symbol.toStringTag,{value:"Module"}),Object.defineProperty(t,"__esModule",{value:!0})},n.t=function(t,e){if(1&e&&(t=n(t)),8&e)return t;if(4&e&&"object"==typeof t&&t&&t.__esModule)return t;var r=Object.create(null);if(n.r(r),Object.defineProperty(r,"default",{enumerable:!0,value:t}),2&e&&"string"!=typeof t)for(var o in t)n.d(r,o,function(e){return t[e]}.bind(null,o));return r},n.n=function(t){var e=t&&t.__esModule?function(){return t.default}:function(){return t};return n.d(e,"a",e),e},n.o=function(t,e){return Object.prototype.hasOwnProperty.call(t,e)},n.p="",n(n.s=80)}([function(t,e,n){(function(e){var n=function(t){return t&&t.Math==Math&&t};t.exports=n("object"==typeof globalThis&&globalThis)||n("object"==typeof window&&window)||n("object"==typeof self&&self)||n("object"==typeof e&&e)||function(){return this}()||Function("return this")()}).call(this,n(44))},function(t,e){var n=Function.prototype,r=n.bind,o=n.call,i=r&&r.bind(o);t.exports=r?function(t){return t&&i(o,t)}:function(t){return t&&function(){return o.apply(t,arguments)}}},function(t,e){t.exports=function(t){return"function"==typeof t}},function(t,e){t.exports=function(t){try{return!!t()}catch(t){return!0}}},function(t,e,n){var r=n(1),o=n(13),i=r({}.hasOwnProperty);t.exports=Object.hasOwn||function(t,e){return i(o(t),e)}},function(t,e,n){var r=n(2);t.exports=function(t){return"object"==typeof t?null!==t:r(t)}},function(t,e,n){var r=n(0),o=n(24),i=n(4),a=n(26),c=n(27),u=n(28),s=o("wks"),f=r.Symbol,l=f&&f.for,v=u?f:f&&f.withoutSetter||a;t.exports=function(t){if(!i(s,t)||!c&&"string"!=typeof s[t]){var e="Symbol."+t;c&&i(f,t)?s[t]=f[t]:s[t]=u&&l?l(e):v(e)}return s[t]}},function(t,e,n){var r=n(3);t.exports=!r((function(){return 7!=Object.defineProperty({},1,{get:function(){return 7}})[1]}))},function(t,e,n){var r=n(0),o=n(2),i=function(t){return o(t)?t:void 0};t.exports=function(t,e){return arguments.length<2?i(r[t]):r[t]&&r[t][e]}},function(t,e,n){var r=n(7),o=n(15),i=n(18);t.exports=r?function(t,e,n){return o.f(t,e,i(1,n))}:function(t,e,n){return t[e]=n,t}},function(t,e,n){var r={};r[n(6)("toStringTag")]="z",t.exports="[object z]"===String(r)},function(t,e,n){var r=n(0),o=n(12),i=r["__core-js_shared__"]||o("__core-js_shared__",{});t.exports=i},function(t,e,n){var r=n(0),o=Object.defineProperty;t.exports=function(t,e){try{o(r,t,{value:e,configurable:!0,writable:!0})}catch(n){r[t]=e}return e}},function(t,e,n){var r=n(0),o=n(25),i=r.Object;t.exports=function(t){return i(o(t))}},function(t,e,n){var r,o,i=n(0),a=n(46),c=i.process,u=i.Deno,s=c&&c.versions||u&&u.version,f=s&&s.v8;f&&(o=(r=f.split("."))[0]>0&&r[0]<4?1:+(r[0]+r[1])),!o&&a&&(!(r=a.match(/Edge\/(\d+)/))||r[1]>=74)&&(r=a.match(/Chrome\/(\d+)/))&&(o=+r[1]),t.exports=o},function(t,e,n){var r=n(0),o=n(7),i=n(30),a=n(32),c=n(16),u=r.TypeError,s=Object.defineProperty;e.f=o?s:function(t,e,n){if(a(t),e=c(e),a(n),i)try{return s(t,e,n)}catch(t){}if("get"in n||"set"in n)throw u("Accessors not supported");return"value"in n&&(t[e]=n.value),t}},function(t,e,n){var r=n(47),o=n(33);t.exports=function(t){var e=r(t,"string");return o(e)?e:e+""}},function(t,e){var n=Function.prototype.call;t.exports=n.bind?n.bind(n):function(){return n.apply(n,arguments)}},function(t,e){t.exports=function(t,e){return{enumerable:!(1&t),configurable:!(2&t),writable:!(4&t),value:e}}},function(t,e,n){var r=n(1),o=n(2),i=n(11),a=r(Function.toString);o(i.inspectSource)||(i.inspectSource=function(t){return a(t)}),t.exports=i.inspectSource},function(t,e,n){var r=n(1),o=r({}.toString),i=r("".slice);t.exports=function(t){return i(o(t),8,-1)}},function(t,e,n){var r=n(62);t.exports=function(t){return r(t.length)}},function(t,e,n){var r=n(38),o=n(25);t.exports=function(t){return r(o(t))}},function(t,e,n){var r=n(10),o=n(29),i=n(56);r||o(Object.prototype,"toString",i,{unsafe:!0})},function(t,e,n){var r=n(45),o=n(11);(t.exports=function(t,e){return o[t]||(o[t]=void 0!==e?e:{})})("versions",[]).push({version:"3.19.1",mode:r?"pure":"global",copyright:"Â© 2021 Denis Pushkarev (zloirock.ru)"})},function(t,e,n){var r=n(0).TypeError;t.exports=function(t){if(null==t)throw r("Can't call method on "+t);return t}},function(t,e,n){var r=n(1),o=0,i=Math.random(),a=r(1..toString);t.exports=function(t){return"Symbol("+(void 0===t?"":t)+")_"+a(++o+i,36)}},function(t,e,n){var r=n(14),o=n(3);t.exports=!!Object.getOwnPropertySymbols&&!o((function(){var t=Symbol();return!String(t)||!(Object(t)instanceof Symbol)||!Symbol.sham&&r&&r<41}))},function(t,e,n){var r=n(27);t.exports=r&&!Symbol.sham&&"symbol"==typeof Symbol.iterator},function(t,e,n){var r=n(0),o=n(2),i=n(4),a=n(9),c=n(12),u=n(19),s=n(52),f=n(55).CONFIGURABLE,l=s.get,v=s.enforce,d=String(String).split("String");(t.exports=function(t,e,n,u){var s,l=!!u&&!!u.unsafe,p=!!u&&!!u.enumerable,m=!!u&&!!u.noTargetGet,h=u&&void 0!==u.name?u.name:e;o(n)&&("Symbol("===String(h).slice(0,7)&&(h="["+String(h).replace(/^Symbol\(([^)]*)\)/,"$1")+"]"),(!i(n,"name")||f&&n.name!==h)&&a(n,"name",h),(s=v(n)).source||(s.source=d.join("string"==typeof h?h:""))),t!==r?(l?!m&&t[e]&&(p=!0):delete t[e],p?t[e]=n:a(t,e,n)):p?t[e]=n:c(e,n)})(Function.prototype,"toString",(function(){return o(this)&&l(this).source||u(this)}))},function(t,e,n){var r=n(7),o=n(3),i=n(31);t.exports=!r&&!o((function(){return 7!=Object.defineProperty(i("div"),"a",{get:function(){return 7}}).a}))},function(t,e,n){var r=n(0),o=n(5),i=r.document,a=o(i)&&o(i.createElement);t.exports=function(t){return a?i.createElement(t):{}}},function(t,e,n){var r=n(0),o=n(5),i=r.String,a=r.TypeError;t.exports=function(t){if(o(t))return t;throw a(i(t)+" is not an object")}},function(t,e,n){var r=n(0),o=n(8),i=n(2),a=n(48),c=n(28),u=r.Object;t.exports=c?function(t){return"symbol"==typeof t}:function(t){var e=o("Symbol");return i(e)&&a(e.prototype,u(t))}},function(t,e,n){var r=n(0),o=n(2),i=n(50),a=r.TypeError;t.exports=function(t){if(o(t))return t;throw a(i(t)+" is not a function")}},function(t,e){t.exports={}},function(t,e,n){var r=n(0),o=n(10),i=n(2),a=n(20),c=n(6)("toStringTag"),u=r.Object,s="Arguments"==a(function(){return arguments}());t.exports=o?a:function(t){var e,n,r;return void 0===t?"Undefined":null===t?"Null":"string"==typeof(n=function(t,e){try{return t[e]}catch(t){}}(e=u(t),c))?n:s?a(e):"Object"==(r=a(e))&&i(e.callee)?"Arguments":r}},function(t,e,n){var r=n(0),o=n(57),i=n(58),a=n(59),c=n(9),u=function(t){if(t&&t.forEach!==a)try{c(t,"forEach",a)}catch(e){t.forEach=a}};for(var s in o)o[s]&&u(r[s]&&r[s].prototype);u(i)},function(t,e,n){var r=n(0),o=n(1),i=n(3),a=n(20),c=r.Object,u=o("".split);t.exports=i((function(){return!c("z").propertyIsEnumerable(0)}))?function(t){return"String"==a(t)?u(t,""):c(t)}:c},function(t,e){var n=Math.ceil,r=Math.floor;t.exports=function(t){var e=+t;return e!=e||0===e?0:(e>0?r:n)(e)}},function(t,e,n){var r=n(63);t.exports=function(t,e){return new(r(t))(0===e?0:e)}},function(t,e,n){var r=n(20);t.exports=Array.isArray||function(t){return"Array"==r(t)}},function(t,e,n){var r=n(7),o=n(17),i=n(68),a=n(18),c=n(22),u=n(16),s=n(4),f=n(30),l=Object.getOwnPropertyDescriptor;e.f=r?l:function(t,e){if(t=c(t),e=u(e),f)try{return l(t,e)}catch(t){}if(s(t,e))return a(!o(i.f,t,e),t[e])}},function(t,e,n){},function(t,e){var n;n=function(){return this}();try{n=n||new Function("return this")()}catch(t){"object"==typeof window&&(n=window)}t.exports=n},function(t,e){t.exports=!1},function(t,e,n){var r=n(8);t.exports=r("navigator","userAgent")||""},function(t,e,n){var r=n(0),o=n(17),i=n(5),a=n(33),c=n(49),u=n(51),s=n(6),f=r.TypeError,l=s("toPrimitive");t.exports=function(t,e){if(!i(t)||a(t))return t;var n,r=c(t,l);if(r){if(void 0===e&&(e="default"),n=o(r,t,e),!i(n)||a(n))return n;throw f("Can't convert object to primitive value")}return void 0===e&&(e="number"),u(t,e)}},function(t,e,n){var r=n(1);t.exports=r({}.isPrototypeOf)},function(t,e,n){var r=n(34);t.exports=function(t,e){var n=t[e];return null==n?void 0:r(n)}},function(t,e,n){var r=n(0).String;t.exports=function(t){try{return r(t)}catch(t){return"Object"}}},function(t,e,n){var r=n(0),o=n(17),i=n(2),a=n(5),c=r.TypeError;t.exports=function(t,e){var n,r;if("string"===e&&i(n=t.toString)&&!a(r=o(n,t)))return r;if(i(n=t.valueOf)&&!a(r=o(n,t)))return r;if("string"!==e&&i(n=t.toString)&&!a(r=o(n,t)))return r;throw c("Can't convert object to primitive value")}},function(t,e,n){var r,o,i,a=n(53),c=n(0),u=n(1),s=n(5),f=n(9),l=n(4),v=n(11),d=n(54),p=n(35),m=c.TypeError,h=c.WeakMap;if(a||v.state){var y=v.state||(v.state=new h),g=u(y.get),b=u(y.has),x=u(y.set);r=function(t,e){if(b(y,t))throw new m("Object already initialized");return e.facade=t,x(y,t,e),e},o=function(t){return g(y,t)||{}},i=function(t){return b(y,t)}}else{var S=d("state");p[S]=!0,r=function(t,e){if(l(t,S))throw new m("Object already initialized");return e.facade=t,f(t,S,e),e},o=function(t){return l(t,S)?t[S]:{}},i=function(t){return l(t,S)}}t.exports={set:r,get:o,has:i,enforce:function(t){return i(t)?o(t):r(t,{})},getterFor:function(t){return function(e){var n;if(!s(e)||(n=o(e)).type!==t)throw m("Incompatible receiver, "+t+" required");return n}}}},function(t,e,n){var r=n(0),o=n(2),i=n(19),a=r.WeakMap;t.exports=o(a)&&/native code/.test(i(a))},function(t,e,n){var r=n(24),o=n(26),i=r("keys");t.exports=function(t){return i[t]||(i[t]=o(t))}},function(t,e,n){var r=n(7),o=n(4),i=Function.prototype,a=r&&Object.getOwnPropertyDescriptor,c=o(i,"name"),u=c&&"something"===function(){}.name,s=c&&(!r||r&&a(i,"name").configurable);t.exports={EXISTS:c,PROPER:u,CONFIGURABLE:s}},function(t,e,n){"use strict";var r=n(10),o=n(36);t.exports=r?{}.toString:function(){return"[object "+o(this)+"]"}},function(t,e){t.exports={CSSRuleList:0,CSSStyleDeclaration:0,CSSValueList:0,ClientRectList:0,DOMRectList:0,DOMStringList:0,DOMTokenList:1,DataTransferItemList:0,FileList:0,HTMLAllCollection:0,HTMLCollection:0,HTMLFormElement:0,HTMLSelectElement:0,MediaList:0,MimeTypeArray:0,NamedNodeMap:0,NodeList:1,PaintRequestList:0,Plugin:0,PluginArray:0,SVGLengthList:0,SVGNumberList:0,SVGPathSegList:0,SVGPointList:0,SVGStringList:0,SVGTransformList:0,SourceBufferList:0,StyleSheetList:0,TextTrackCueList:0,TextTrackList:0,TouchList:0}},function(t,e,n){var r=n(31)("span").classList,o=r&&r.constructor&&r.constructor.prototype;t.exports=o===Object.prototype?void 0:o},function(t,e,n){"use strict";var r=n(60).forEach,o=n(65)("forEach");t.exports=o?[].forEach:function(t){return r(this,t,arguments.length>1?arguments[1]:void 0)}},function(t,e,n){var r=n(61),o=n(1),i=n(38),a=n(13),c=n(21),u=n(40),s=o([].push),f=function(t){var e=1==t,n=2==t,o=3==t,f=4==t,l=6==t,v=7==t,d=5==t||l;return function(p,m,h,y){for(var g,b,x=a(p),S=i(x),w=r(m,h),E=c(S),O=0,j=y||u,D=e?j(p,E):n||v?j(p,0):void 0;E>O;O++)if((d||O in S)&&(b=w(g=S[O],O,x),t))if(e)D[O]=b;else if(b)switch(t){case 3:return!0;case 5:return g;case 6:return O;case 2:s(D,g)}else switch(t){case 4:return!1;case 7:s(D,g)}return l?-1:o||f?f:D}};t.exports={forEach:f(0),map:f(1),filter:f(2),some:f(3),every:f(4),find:f(5),findIndex:f(6),filterReject:f(7)}},function(t,e,n){var r=n(1),o=n(34),i=r(r.bind);t.exports=function(t,e){return o(t),void 0===e?t:i?i(t,e):function(){return t.apply(e,arguments)}}},function(t,e,n){var r=n(39),o=Math.min;t.exports=function(t){return t>0?o(r(t),9007199254740991):0}},function(t,e,n){var r=n(0),o=n(41),i=n(64),a=n(5),c=n(6)("species"),u=r.Array;t.exports=function(t){var e;return o(t)&&(e=t.constructor,(i(e)&&(e===u||o(e.prototype))||a(e)&&null===(e=e[c]))&&(e=void 0)),void 0===e?u:e}},function(t,e,n){var r=n(1),o=n(3),i=n(2),a=n(36),c=n(8),u=n(19),s=function(){},f=[],l=c("Reflect","construct"),v=/^\s*(?:class|function)\b/,d=r(v.exec),p=!v.exec(s),m=function(t){if(!i(t))return!1;try{return l(s,f,t),!0}catch(t){return!1}};t.exports=!l||o((function(){var t;return m(m.call)||!m(Object)||!m((function(){t=!0}))||t}))?function(t){if(!i(t))return!1;switch(a(t)){case"AsyncFunction":case"GeneratorFunction":case"AsyncGeneratorFunction":return!1}return p||!!d(v,u(t))}:m},function(t,e,n){"use strict";var r=n(3);t.exports=function(t,e){var n=[][t];return!!n&&r((function(){n.call(null,e||function(){throw 1},1)}))}},function(t,e,n){"use strict";var r=n(67),o=n(0),i=n(3),a=n(41),c=n(5),u=n(13),s=n(21),f=n(78),l=n(40),v=n(79),d=n(6),p=n(14),m=d("isConcatSpreadable"),h=o.TypeError,y=p>=51||!i((function(){var t=[];return t[m]=!1,t.concat()[0]!==t})),g=v("concat"),b=function(t){if(!c(t))return!1;var e=t[m];return void 0!==e?!!e:a(t)};r({target:"Array",proto:!0,forced:!y||!g},{concat:function(t){var e,n,r,o,i,a=u(this),c=l(a,0),v=0;for(e=-1,r=arguments.length;e<r;e++)if(b(i=-1===e?a:arguments[e])){if(v+(o=s(i))>9007199254740991)throw h("Maximum allowed index exceeded");for(n=0;n<o;n++,v++)n in i&&f(c,v,i[n])}else{if(v>=9007199254740991)throw h("Maximum allowed index exceeded");f(c,v++,i)}return c.length=v,c}})},function(t,e,n){var r=n(0),o=n(42).f,i=n(9),a=n(29),c=n(12),u=n(69),s=n(77);t.exports=function(t,e){var n,f,l,v,d,p=t.target,m=t.global,h=t.stat;if(n=m?r:h?r[p]||c(p,{}):(r[p]||{}).prototype)for(f in e){if(v=e[f],l=t.noTargetGet?(d=o(n,f))&&d.value:n[f],!s(m?f:p+(h?".":"#")+f,t.forced)&&void 0!==l){if(typeof v==typeof l)continue;u(v,l)}(t.sham||l&&l.sham)&&i(v,"sham",!0),a(n,f,v,t)}}},function(t,e,n){"use strict";var r={}.propertyIsEnumerable,o=Object.getOwnPropertyDescriptor,i=o&&!r.call({1:2},1);e.f=i?function(t){var e=o(this,t);return!!e&&e.enumerable}:r},function(t,e,n){var r=n(4),o=n(70),i=n(42),a=n(15);t.exports=function(t,e){for(var n=o(e),c=a.f,u=i.f,s=0;s<n.length;s++){var f=n[s];r(t,f)||c(t,f,u(e,f))}}},function(t,e,n){var r=n(8),o=n(1),i=n(71),a=n(76),c=n(32),u=o([].concat);t.exports=r("Reflect","ownKeys")||function(t){var e=i.f(c(t)),n=a.f;return n?u(e,n(t)):e}},function(t,e,n){var r=n(72),o=n(75).concat("length","prototype");e.f=Object.getOwnPropertyNames||function(t){return r(t,o)}},function(t,e,n){var r=n(1),o=n(4),i=n(22),a=n(73).indexOf,c=n(35),u=r([].push);t.exports=function(t,e){var n,r=i(t),s=0,f=[];for(n in r)!o(c,n)&&o(r,n)&&u(f,n);for(;e.length>s;)o(r,n=e[s++])&&(~a(f,n)||u(f,n));return f}},function(t,e,n){var r=n(22),o=n(74),i=n(21),a=function(t){return function(e,n,a){var c,u=r(e),s=i(u),f=o(a,s);if(t&&n!=n){for(;s>f;)if((c=u[f++])!=c)return!0}else for(;s>f;f++)if((t||f in u)&&u[f]===n)return t||f||0;return!t&&-1}};t.exports={includes:a(!0),indexOf:a(!1)}},function(t,e,n){var r=n(39),o=Math.max,i=Math.min;t.exports=function(t,e){var n=r(t);return n<0?o(n+e,0):i(n,e)}},function(t,e){t.exports=["constructor","hasOwnProperty","isPrototypeOf","propertyIsEnumerable","toLocaleString","toString","valueOf"]},function(t,e){e.f=Object.getOwnPropertySymbols},function(t,e,n){var r=n(3),o=n(2),i=/#|\.prototype\./,a=function(t,e){var n=u[c(t)];return n==f||n!=s&&(o(e)?r(e):!!e)},c=a.normalize=function(t){return String(t).replace(i,".").toLowerCase()},u=a.data={},s=a.NATIVE="N",f=a.POLYFILL="P";t.exports=a},function(t,e,n){"use strict";var r=n(16),o=n(15),i=n(18);t.exports=function(t,e,n){var a=r(e);a in t?o.f(t,a,i(0,n)):t[a]=n}},function(t,e,n){var r=n(3),o=n(6),i=n(14),a=o("species");t.exports=function(t){return i>=51||!r((function(){var e=[];return(e.constructor={})[a]=function(){return{foo:1}},1!==e[t](Boolean).foo}))}},function(t,e,n){"use strict";n.r(e);n(43),n(23),n(37);function r(t,e){for(var n=0;n<e.length;n++){var r=e[n];r.enumerable=r.enumerable||!1,r.configurable=!0,"value"in r&&(r.writable=!0),Object.defineProperty(t,r.key,r)}}var o=function(){function t(){!function(t,e){if(!(t instanceof e))throw new TypeError("Cannot call a class as a function")}(this,t),this.ter=0}var e,n,o;return e=t,(n=[{key:"formaForCard",value:function(t){var e=document.createElement("form");e.className="form-add-card",e.innerHTML='\n    <input class="form-text" type="text" placeholder="Enter a title for this card" data-original-title="" title=""> \n    <button class="add-card">Add</button> \n    <button class="cancel-add"></button>',t.before(e),t.remove()}},{key:"newCard",value:function(t,e){t.preventDefault();var n=document.querySelector(".form-text").value,r=e.closest(".items"),o=document.createElement("li");o.className="items-item",o.innerHTML="".concat(n,'\n    <button class= "delete-card"></button>');var i=document.querySelector(".form-add-card");i.before(o),i.remove();var a=document.createElement("button");a.className="new-card",a.innerHTML="+Add another card",r.append(a)}}])&&r(e.prototype,n),o&&r(e,o),t}();function i(t,e){for(var n=0;n<e.length;n++){var r=e[n];r.enumerable=r.enumerable||!1,r.configurable=!0,"value"in r&&(r.writable=!0),Object.defineProperty(t,r.key,r)}}var a=function(){function t(){!function(t,e){if(!(t instanceof e))throw new TypeError("Cannot call a class as a function")}(this,t)}var e,n,r;return e=t,(n=[{key:"delete",value:function(t,e){t.preventDefault(),e.closest(".items-item").remove()}}])&&i(e.prototype,n),r&&i(e,r),t}();n(66);function c(t,e){for(var n=0;n<e.length;n++){var r=e[n];r.enumerable=r.enumerable||!1,r.configurable=!0,"value"in r&&(r.writable=!0),Object.defineProperty(t,r.key,r)}}var u=function(){function t(){!function(t,e){if(!(t instanceof e))throw new TypeError("Cannot call a class as a function")}(this,t),this.element=void 0,this.activeDragElement=void 0,this.endDrag=this.endDrag.bind(this),this.drag=this.drag.bind(this),this.shiftX=void 0,this.shiftY=void 0,this.elementDown=void 0}var e,n,r;return e=t,(n=[{key:"startDrag",value:function(t,e){var n=document.createElement("div");n.className="shadow",n.style.cssText="height:".concat(t.offsetHeight,"px; width:").concat(t.offsetWidth,"px "),this.activeDragElement=t;var r=this.activeDragElement.getBoundingClientRect();this.shiftX=e.clientX-r.left,this.shiftY=e.clientY-r.top,t.replaceWith(n),this.activeDragElement.classList.add("dragged"),document.body.append(this.activeDragElement),this.activeDragElement.style.left="".concat(e.pageX-this.shiftX,"px"),this.activeDragElement.style.top="".concat(e.pageY-this.shiftY,"px"),this.activeDragElement.hidden=!0,this.activeDragElement.hidden=!1,document.documentElement.addEventListener("mouseup",this.endDrag),document.documentElement.addEventListener("mousemove",this.drag)}},{key:"endDrag",value:function(t){if(this.activeDragElement){this.activeDragElement.hidden=!0;var e=document.elementFromPoint(t.clientX,t.clientY);if(this.activeDragElement.hidden=!1,this.activeDragElement.classList.remove("dragged"),this.activeDragElement.style.left="".concat(0,"px"),this.activeDragElement.style.top="".concat(0,"px"),"shadow"===e.className||"items-item"===e.className)e.replaceWith(this.activeDragElement);else if(e.classList.contains("items")){var n=e.querySelector(".new-card");e.insertBefore(this.activeDragElement,n)}else"header"===e.className&&e.after(this.activeDragElement);document.querySelector(".shadow")&&document.querySelector(".shadow").remove(),this.activeDragElement=void 0}document.documentElement.removeEventListener("mouseup",this.endDrag),document.documentElement.removeEventListener("mousemove",this.drag)}},{key:"drag",value:function(t){if(t.preventDefault(),this.activeDragElement){this.activeDragElement.style.left="".concat(t.pageX-this.shiftX,"px"),this.activeDragElement.style.top="".concat(t.pageY-this.shiftY,"px"),this.activeDragElement.hidden=!0;var e=document.elementFromPoint(t.clientX,t.clientY);this.activeDragElement.hidden=!1;var n=e.getBoundingClientRect().top+e.getBoundingClientRect().height/2;if("items-item"===e.className){document.querySelector(".shadow")&&document.querySelector(".shadow").remove(),this.elementDown=e;var r=document.createElement("li");r.className="shadow",r.style.height="".concat(this.activeDragElement.offsetHeight,"px"),t.clientY<=n?this.elementDown.before(r):t.clientY>n&&this.elementDown.after(r)}}}}])&&c(e.prototype,n),r&&c(e,r),t}();function s(t,e){for(var n=0;n<e.length;n++){var r=e[n];r.enumerable=r.enumerable||!1,r.configurable=!0,"value"in r&&(r.writable=!0),Object.defineProperty(t,r.key,r)}}var f=function(){function t(e){!function(t,e){if(!(t instanceof e))throw new TypeError("Cannot call a class as a function")}(this,t),this.storage=e}var e,n,r;return e=t,(n=[{key:"save",value:function(t){this.storage.setItem("state",JSON.stringify(t))}},{key:"load",value:function(){try{return JSON.parse(this.storage.getItem("state"))}catch(t){throw new Error("Invalid state")}}}])&&s(e.prototype,n),r&&s(e,r),t}();function l(t,e){for(var n=0;n<e.length;n++){var r=e[n];r.enumerable=r.enumerable||!1,r.configurable=!0,"value"in r&&(r.writable=!0),Object.defineProperty(t,r.key,r)}}var v=function(){function t(){!function(t,e){if(!(t instanceof e))throw new TypeError("Cannot call a class as a function")}(this,t)}var e,n,r;return e=t,(n=[{key:"fromSave",value:function(t){var e=document.querySelector(".todo"),n=document.querySelector(".in-progress"),r=document.querySelector(".done");t.todo.forEach((function(t){var n=document.createElement("li");n.className="items-item",n.innerHTML="\n         ".concat(t,'\n        <button class= "delete-card"></button>'),e.querySelector(".header").after(n)})),t.inprogress.forEach((function(t){var e=document.createElement("li");e.className="items-item",e.innerHTML="\n           ".concat(t,'\n          <button class= "delete-card"></button>'),n.querySelector(".header").after(e)})),t.done.forEach((function(t){var e=document.createElement("li");e.className="items-item",e.innerHTML="\n           ".concat(t,'\n          <button class= "delete-card"></button>'),r.querySelector(".header").after(e)}))}}])&&l(e.prototype,n),r&&l(e,r),t}(),d=new o,p=new a,m=new u,h=new f(localStorage),y=new v,g=document.querySelector(".container");g.onclick=function(t){var e=t.target;if("new-card"===e.className)d.formaForCard(e);else if("add-card"===e.className)d.newCard(t,e);else if("cancel-add"===e.className){t.preventDefault();var n=e.closest(".items");document.querySelector(".form-add-card").remove();var r=document.createElement("button");r.className="new-card",r.innerHTML="+Add another card",n.append(r)}else"delete-card"===e.className&&p.delete(t,e)},g.onmouseover=function(t){var e=t.target;"items-item"===e.className&&(e.querySelector(".delete-card").style.visibility="visible")},g.onmouseout=function(t){var e=t.target,n=t.relatedTarget;null!=n&&"delete-card"===n.className||"items-item"===e.className&&document.querySelectorAll(".delete-card").forEach((function(t){t.style.visibility="hidden"}))},g.onmousedown=function(t){var e=t.target;"items-item"===e.className&&m.startDrag(e,t)};var b={todo:[],inprogress:[],done:[]};window.addEventListener("beforeunload",(function(){document.querySelectorAll(".items-item").forEach((function(t){t.closest(".todo")?b.todo.push(t.innerText):t.closest(".in-progress")?b.inprogress.push(t.innerText):t.closest(".done")&&b.done.push(t.innerText)})),h.save(b)})),y.fromSave(h.load())}]);
//# sourceMappingURL=data:application/json;charset=utf-8;base64,